
# Generated by CodiumAI

from structures.records.record import Record

import pytest

class TestRecord:

    #  Creating a Record instance with a list of tags
    def test_create_record_with_tags(self):
        tags = ['tag1', 'tag2']
        record = Record(tags)
        assert record.tags == tags

    #  Connecting another Record instance and verifying the connection
    def test_connect_record_instance(self):
        record1 = Record(['tag1'])
        record2 = Record(['tag2'])
        record1.connect(record2)
        assert type(record2) in record1.connections
        assert record2 in record1.connections[type(record2)]

    #  Retrieving known tags after creating multiple Record instances
    def test_retrieve_known_tags(self):
        Record(['tag1'])
        Record(['tag2'])
        known_tags = Record.get_known_tags()
        assert 'tag1' in known_tags
        assert 'tag2' in known_tags

    #  Adding multiple connections of the same type and verifying them
    def test_add_multiple_connections_same_type(self):
        record1 = Record(['tag1'])
        record2 = Record(['tag2'])
        record3 = Record(['tag3'])
        record1.connect(record2)
        record1.connect(record3)
        assert len(record1.connections[type(record2)]) == 2

    #  Ensuring known tags are updated when new tags are added
    def test_known_tags_updated(self):
        Record(['tag1'])
        Record(['tag2', 'tag3'])
        known_tags = Record.get_known_tags()
        assert 'tag1' in known_tags
        assert 'tag2' in known_tags
        assert 'tag3' in known_tags

    #  Creating a Record instance with an empty list of tags
    def test_create_record_with_empty_tags(self):
        record = Record([])
        assert record.tags == []

    #  Connecting a Record instance to itself
    def test_connect_record_to_itself(self):
        record = Record(['tag1'])
        record.connect(record)
        assert type(record) in record.connections
        assert record in record.connections[type(record)]

    #  Adding a connection of a type that already exists in connections
    def test_add_existing_connection_type(self):
        record1 = Record(['tag1'])
        record2 = Record(['tag2'])
        record3 = Record(['tag3'])
        record1.connect(record2)
        record1.connect(record3)
        assert len(record1.connections[type(record2)]) == 2

    #  Creating a Record instance with duplicate tags
    def test_create_record_with_duplicate_tags(self):
        tags = ['tag1', 'tag1']
        record = Record(tags)
        assert len(record.tags) == 2

    #  Connecting a Record instance with an invalid type (non-Record)
    def test_connect_invalid_type(self):
        record = Record(['tag1'])
        with pytest.raises(TypeError):
            record.connect("invalid")

    #  Verifying that known tags are unique across all instances
    def test_known_tags_unique(self):
        Record(['tag1', 'tag2'])
        Record(['tag2', 'tag3'])
        known_tags = Record.get_known_tags()
        assert len(known_tags) == len(set(known_tags))

    #  Checking the immutability of the known tags list returned by get_known_tags
    def test_immutability_of_known_tags_list(self):
        Record(['tag1'])
        known_tags = Record.get_known_tags()
        known_tags.append('new_tag')
        assert 'new_tag' not in Record.get_known_tags()
